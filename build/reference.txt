rotation and orbit method 1
class CanvasObject {
  constructor(x, y, width, height) {
    this.canvas = undefined;
    this.objectSet = undefined;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.color = 0;
    this.lastTimeRendered = 2;
    this.maxTimeWithoutRendering = 65535;
    this.rotation = 0;
    this.orbit = null; // Set to the parent object for orbiting behavior
    CanvasObject.list.push(this);
  }
}

class Rect extends ClickableObject {
  constructor(x, y, width, height) {
    super(x, y, width, height);
    this.lineWidth = 1.0;
    this.type = 'fill';
  }

  render() {
    if (!this.canvas) return;
    const ctx = this.canvas.context;
    ctx.save();
    ctx.lineWidth = this.lineWidth;

    super.preRender(this.canvas);

    // Apply rotation
    ctx.translate(super.getTrueXPos(), super.getTrueYPos());
    ctx.rotate(this.rotation);

    // Apply orbiting if there is a parent object
    if (this.orbit instanceof CanvasObject) {
      const orbitX = this.orbit.x; // Orbit around the parent's coordinates
      const orbitY = this.orbit.y; // Orbit around the parent's coordinates
      ctx.translate(orbitX, orbitY);
    }

    ctx.beginPath();
    ctx.rect(-this.width / 2, -this.height / 2, this.width, this.height);
    ctx.closePath();
    ctx[this.type]();
    ctx.restore();
  }
}



rotation and orbit method 2
class Rect extends ClickableObject {
  constructor(x, y, width, height) {
    super(x, y, width, height);
    this.lineWidth = 1.0;
    this.type = 'fill';
    this.rotation = 0;
    this.orbitCenterX = 0; // Center X position for orbiting
    this.orbitCenterY = 0; // Center Y position for orbiting
    this.orbitRadius = 0; // Radius for orbiting
  }

  render() {
    if (!this.canvas) return;
    const ctx = this.canvas.context;
    ctx.save();
    ctx.lineWidth = this.lineWidth;

    super.preRender(this.canvas);

    // Apply rotation
    ctx.translate(super.getTrueXPos(), super.getTrueYPos());
    ctx.rotate(this.rotation);

    // Apply orbiting
    const orbitX = this.orbitCenterX + Math.cos(this.rotation) * this.orbitRadius;
    const orbitY = this.orbitCenterY + Math.sin(this.rotation) * this.orbitRadius;
    ctx.translate(orbitX, orbitY);

    ctx.beginPath();
    ctx.rect(-this.width / 2, -this.height / 2, this.width, this.height); // Adjust the coordinates based on the center of the rectangle
    ctx.closePath();
    ctx[this.type]();
    ctx.restore();
  }
}



object to number function
return (256 ** 3 * value.red) +
    (256 ** 2 * value.green) +
    (256 * value.blue) +
    Math.round(value.alpha * 255);